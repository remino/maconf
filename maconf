#!/bin/sh
# maconf
# Get and set various settings in macOS.

maconf_main() {
	scriptpath="` realpath "$0" `"  
	scriptname="` basename "$scriptpath" `"
	scriptdir="` dirname "$scriptpath" `"

	e_args=16
	e_no_defaults=17

	help=0

	while getopts h opt
	do
		case $opt in
			h) maconf_help && return ;;
			*) _invalid_opt "$opt" ;;
		esac
	done

	shift ` expr $OPTIND - 1 `

	maconf_process "$@"

	return $?
}

maconf_process() {
	[ $# -lt 1 ] && maconf_help && return

	arg1="$1"
	[ -n "$arg1" ] && shift

	arg2="$1"
	[ -n "$arg2" ] && shift

	case "${arg1}_$arg2" in
		dock_|\
		dock_addspacer|\
		dock_delay|\
		dock_hiddenapps|\
		dock_restart|\
		finder_|\
		finder_fullpath|\
		finder_restart)
			[ -z "$arg2" ] && "maconf_help_$arg1" "$@" && return
			[ $help -ne 0 ] && "maconf_help_${arg1}_$arg2" "$@" && return
			"maconf_${arg1}_$arg2" "$@"
			;;

		help_*|usage_*)
			help=1
			shift
			maconf_process "$@"
			;;

		*) _invalid_arg "$arg1" "$arg2" ;;
	esac
}

maconf_dock_addspacer() {
  _echo "Adding spacer to Dock..."

  _write com.apple.dock persistent-apps \
    -array-add '{tile-data={}; tile-type="spacer-tile";}'

  _restart_dock
}

maconf_dock_delay() {
  val="$1"
	
	if [ -z "$val" ]
	then
		_read com.apple.dock autohide-time-modifier
		return
	fi

	args=

  case "$val" in
    none) args="-int 0" ;;
    normal|reset) args="" ;;
    short) args="-float 0.12" ;;
    *) args="-float $val" ;;
  esac

  _echo "Setting reveal delay of Dock..."

  if [ -z "$args" ]
  then
    defaults delete com.apple.dock autohide-time-modifier
  else
    defaults write com.apple.dock autohide-time-modifier $args
  fi

  _restart_dock
}

maconf_dock_hiddenapps() {
	val="$1"
	
	if [ -z "$val" ]
	then
		_read com.apple.Dock showhidden
		return
	fi

	args=

	case "$val" in
		conceal)
      _echo 'Setting hidden apps to be shown as opaque icons in Dock...'
			args='-bool FALSE'
			;;

		reveal)
      _echo 'Setting hidden apps to be shown as translucent icons in Dock...'
			args='-bool TRUE'
			;;

		*) _invalid_arg "$val" ;;
	esac

  _write com.apple.Dock showhidden $args
	_restart_dock
}

maconf_dock_restart() {
	_restart_dock
}

maconf_finder_fullpath() {
	val="$1"
	
	if [ -z "$val" ]
	then
		_read com.apple.finder _FXShowPosixPathInTitle
		return
	fi

	args=

	case "$val" in
		hide)
      _echo "Setting only current folder's name to be shown in Finder's title bar..."
			args='-bool FALSE'
			;;

		show)
      _echo "Setting full path to be shown in Finder's title bar..."
			args='-bool TRUE'
			;;

		*) _invalid_arg "$val" ;;
	esac

  _write com.apple.finder _FXShowPosixPathInTitle $args
	_restart_finder
}

maconf_finder_restart() {
	_restart_finder
}

maconf_help() {
	help_cmd="$1"

	case "$help_cmd" in
		dock|finder)
			"maconf_help_${help_cmd}" "$@"
			;;
		*) maconf_help_all ;;
	esac
}

maconf_help_all() {
cat <<USAGE
Usage: $scriptname [options] command

Get and set various settings in macOS.

Available commands:

	dock       Get or set settings related to the Dock.
	finder     Get or set settings related to the Finder.

	help       Show this help screen.

Available options:

	-h         Show this help screen.

USAGE
}

maconf_help_dock() {
cat <<USAGE
Usage: $scriptname [options] dock [args...]

Get or set settings related to the Dock.

Available settings:

	addspacer
		Add spacer to Dock.

	delay
		Get or set delay before Dock appears in seconds.

	hiddenapps
		Get or set whether apps hidden in Dock appear as opaque or transparent.

	restart
		Restart the Dock.

USAGE
}

maconf_help_dock_addspacer() {
cat <<USAGE
Usage: $scriptname [options] dock addspacer

Add spacer to Dock.

USAGE
}

maconf_help_dock_delay() {
cat <<USAGE
Usage: $scriptname [options] dock delay [time_in_seconds]

Get or set delay before Dock appears in seconds.

USAGE
}

maconf_help_dock_hiddenapps() {
cat <<USAGE
Usage: $scriptname [options] dock hiddenapps [conceal|reveal]

Get or set whether apps hidden in Dock appear as opaque or transparent.

USAGE
}

maconf_help_dock_restart() {
cat <<USAGE
Usage: $scriptname [options] dock restart

Restart the Dock.

USAGE
}

maconf_help_finder() {
cat <<USAGE
Usage: $scriptname [options] finder [args...]

Get or set settings related to the Finder.

Available settings:

	fullpath
		Get whether or not the full path is shown.

	restart
		Restart the Finder.

USAGE
}

maconf_help_dock_hiddenapps() {
cat <<USAGE
Usage: $scriptname [options] dock fullpath [hide|show]

Get or set whether or not the full path is shown.

USAGE
}

maconf_help_finder_restart() {
cat <<USAGE
Usage: $scriptname [options] finder restart

Restart the Finder.

USAGE
}

_defaults() {
	_require_defaults
	defaults "$@"
}

_delete() {
	_defaults delete "$@"
}

_read() {
	_defaults read "$@"
}

_echo() {
	echo "$@"
}

_error() {
	_echo "$@" >&2
}

_fatal() {
	local exit_code
	exit_code="$1"
	shift
	_error "$@"
	exit "$exit_code"
}

_invalid_arg() {
	_error "Invalid argument: $*"
	_echo
	exit $e_args
}

_invalid_opt() {
	_error "Invalid option: $1"
	_echo
	exit $e_args
}

_require_defaults() {
	which defaults 2>&1 > /dev/null && return
	_fatal $e_no_defaults "The defaults program is missing. Are you running this on macOS?"
}

_restart_dock() {
  _echo "Restarting Dock..."
  killall Dock
}

_restart_finder() {
  _echo "Restarting Finder..."
  killall Finder
}

_write() {
	_defaults write "$@"
}

maconf_main "$@"
